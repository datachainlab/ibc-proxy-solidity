// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/relay/ethmultisig/ethmultisig.proto

package ethmultisig

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProverConfig struct {
	Diversifier string      `protobuf:"bytes,1,opt,name=diversifier,proto3" json:"diversifier,omitempty"`
	Wallets     []*HDWallet `protobuf:"bytes,2,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (m *ProverConfig) Reset()         { *m = ProverConfig{} }
func (m *ProverConfig) String() string { return proto.CompactTextString(m) }
func (*ProverConfig) ProtoMessage()    {}
func (*ProverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2476e5d20aae6674, []int{0}
}
func (m *ProverConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProverConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProverConfig.Merge(m, src)
}
func (m *ProverConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProverConfig proto.InternalMessageInfo

func (m *ProverConfig) GetDiversifier() string {
	if m != nil {
		return m.Diversifier
	}
	return ""
}

func (m *ProverConfig) GetWallets() []*HDWallet {
	if m != nil {
		return m.Wallets
	}
	return nil
}

type HDWallet struct {
	Mnemonic string `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	HdwPath  string `protobuf:"bytes,2,opt,name=hdw_path,json=hdwPath,proto3" json:"hdw_path,omitempty"`
}

func (m *HDWallet) Reset()         { *m = HDWallet{} }
func (m *HDWallet) String() string { return proto.CompactTextString(m) }
func (*HDWallet) ProtoMessage()    {}
func (*HDWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_2476e5d20aae6674, []int{1}
}
func (m *HDWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HDWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HDWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HDWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDWallet.Merge(m, src)
}
func (m *HDWallet) XXX_Size() int {
	return m.Size()
}
func (m *HDWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_HDWallet.DiscardUnknown(m)
}

var xxx_messageInfo_HDWallet proto.InternalMessageInfo

func (m *HDWallet) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

func (m *HDWallet) GetHdwPath() string {
	if m != nil {
		return m.HdwPath
	}
	return ""
}

func init() {
	proto.RegisterType((*ProverConfig)(nil), "ProverConfig")
	proto.RegisterType((*HDWallet)(nil), "HDWallet")
}

func init() {
	proto.RegisterFile("ibc/relay/ethmultisig/ethmultisig.proto", fileDescriptor_2476e5d20aae6674)
}

var fileDescriptor_2476e5d20aae6674 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x46, 0x9b, 0xfe, 0xd2, 0xdf, 0xd6, 0x65, 0x8a, 0x18, 0xda, 0x0e, 0x56, 0x55, 0x06, 0xba,
	0x34, 0x96, 0xe0, 0x09, 0x80, 0x0e, 0x8c, 0x55, 0x25, 0x84, 0xc4, 0x00, 0xb2, 0x63, 0xc7, 0xbe,
	0x92, 0x93, 0x1b, 0x39, 0x4e, 0x43, 0xde, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41,
	0x84, 0x16, 0x55, 0x62, 0x3b, 0xf7, 0x1c, 0xe9, 0x0e, 0x1f, 0xb9, 0x04, 0x11, 0x33, 0xa7, 0x2c,
	0xaf, 0x99, 0xf2, 0x26, 0x2d, 0xad, 0x87, 0x02, 0xf4, 0x29, 0x47, 0xb9, 0x43, 0x8f, 0xb3, 0x73,
	0x8d, 0x1a, 0x3b, 0x64, 0xdf, 0x74, 0xb0, 0x53, 0x8d, 0xa8, 0xad, 0x62, 0xdd, 0x25, 0xca, 0x84,
	0xf1, 0xac, 0xfe, 0x49, 0x8b, 0x07, 0x72, 0xb6, 0x71, 0xb8, 0x53, 0xee, 0x0e, 0xb3, 0x04, 0x74,
	0x38, 0x27, 0x63, 0x09, 0x3b, 0xe5, 0x0a, 0x48, 0x40, 0xb9, 0x49, 0x30, 0x0f, 0x96, 0xa3, 0xed,
	0xa9, 0x0a, 0x2f, 0xc8, 0xa0, 0xe2, 0xd6, 0x2a, 0x5f, 0x4c, 0xfa, 0xf3, 0x7f, 0xcb, 0xf1, 0xd5,
	0x28, 0xba, 0x5f, 0x3f, 0x76, 0x66, 0x7b, 0x2c, 0x8b, 0x1b, 0x32, 0x3c, 0xca, 0x70, 0x46, 0x86,
	0x69, 0xa6, 0x52, 0xcc, 0x20, 0x3e, 0xfc, 0xfb, 0xbd, 0xc3, 0x29, 0x19, 0x1a, 0x59, 0xbd, 0xe4,
	0xdc, 0x9b, 0x49, 0xbf, 0x6b, 0x03, 0x23, 0xab, 0x0d, 0xf7, 0xe6, 0xf6, 0xf9, 0xbd, 0xa1, 0xc1,
	0xbe, 0xa1, 0xc1, 0x67, 0x43, 0x83, 0xb7, 0x96, 0xf6, 0xf6, 0x2d, 0xed, 0x7d, 0xb4, 0xb4, 0xf7,
	0xb4, 0xd6, 0xe0, 0x4d, 0x29, 0xa2, 0x18, 0x53, 0x26, 0xb9, 0xe7, 0xb1, 0xe1, 0x90, 0x59, 0x2e,
	0x18, 0x88, 0x78, 0x95, 0x3b, 0x7c, 0xad, 0x57, 0x05, 0x5a, 0x90, 0xe0, 0x6b, 0x96, 0xa2, 0x2c,
	0xad, 0x2a, 0xfe, 0x8e, 0x27, 0xfe, 0x77, 0x03, 0x5c, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x93,
	0xd0, 0x86, 0x32, 0x5c, 0x01, 0x00, 0x00,
}

func (m *ProverConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProverConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProverConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wallets) > 0 {
		for iNdEx := len(m.Wallets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wallets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEthmultisig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Diversifier) > 0 {
		i -= len(m.Diversifier)
		copy(dAtA[i:], m.Diversifier)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Diversifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HDWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HDWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HDWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HdwPath) > 0 {
		i -= len(m.HdwPath)
		copy(dAtA[i:], m.HdwPath)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.HdwPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintEthmultisig(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEthmultisig(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthmultisig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProverConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Diversifier)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	if len(m.Wallets) > 0 {
		for _, e := range m.Wallets {
			l = e.Size()
			n += 1 + l + sovEthmultisig(uint64(l))
		}
	}
	return n
}

func (m *HDWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	l = len(m.HdwPath)
	if l > 0 {
		n += 1 + l + sovEthmultisig(uint64(l))
	}
	return n
}

func sovEthmultisig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthmultisig(x uint64) (n int) {
	return sovEthmultisig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProverConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProverConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProverConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diversifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diversifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallets = append(m.Wallets, &HDWallet{})
			if err := m.Wallets[len(m.Wallets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HDWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HDWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HDWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HdwPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthmultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HdwPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthmultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthmultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthmultisig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthmultisig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthmultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthmultisig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthmultisig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthmultisig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthmultisig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthmultisig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthmultisig = fmt.Errorf("proto: unexpected end of group")
)
